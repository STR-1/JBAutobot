local ChatEvents = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents")
local Filtered = ChatEvents:WaitForChild("OnMessageDoneFiltering")
local Managers = {game.Players.LocalPlayer.UserId, 1502142645, 1225367373, 415435783, 1921173067, 3230606713, 606237433, 325320636, 493756281, 181153764, 1080768623}
local Jshorts = {">jstore status", ">jewlery store status", ">j status", ">js status"}
local PowerShorts = {">power status", ">power plant status", ">p status"}
local BankShorts = {">b status", ">bank status"}
local TombShorts = {">t status", ">tomb status"}
local CSHipShorts = {">cs status", ">cargo ship status", ">ship status"}
local CasinoShorts = {">c status", ">casino status"}
local CPlaneShorts = {">plane status", ">cargo plane status"}
local MsmShorts = {">msm status", ">museum status"} 
local TrainShorts = {">train status", ">cargo train status"}
local HangManWords = {"autobot", "lua", "badcc", "donut", "casino", "bank", "hyperchrome", "torpedo", "hypershift", "roblox", "tomb", "train","museum", "subway", "mcdonalds", "halloween", "mountain", "truck", "salt", "pepper", "brulee", "puzzle", "hacker","nuke","admin","builderman","christmas","birthday","youtube","lol","cop","prisoner","manager", "owner","administrator","moderator","ice","welcome","apple","banana","strawberry","blueberry","watermelon","alien","autorobber","america","usa","china","report","spongebob","squidward","lightning","rhythm","music","spotify","asimo3089","fbi","circus","clown","helicopter","pear","grandma","million","billion","trillion","happy","frog","spider","monkey","experience","future","salad","donkey","keycard","server","alpha","delta","tango","bravo","hotel","player","unicorn","candy","golf","system","storage","airplane","november","june","july","august","team","investigation","catscan","officer","donation","deer","fear","dear","detonator","message","season","flordia","fish","xray","labrat","jackpot","equip","kayak","water","puppy","nightclub","galaxy","voodoo","joking","xylophone", "hangman","vortex","jumbo","bicycle","motorcycle","zombie","fall","staff","sword","cringe","zipper","baseball","football","soccer","tennis","boo","crude","potato","milk","kiwi","rose","quiz","exploiter","snow","winter","butter","robot","moose"}
local LevelValidCommandList = {">hyperchrome", ">enable auto", ">disable auto", ">open doors", ">hack casino computers", ">pull", ">pull lever", ">solve puzzles", ">casino code", ">casino timer", ">auto rps", ">auto slots", ">auto flipcoin", ">friend", ">spk ad", ">spk bad", ">spk as", ">who is", ">highest bounty", ">level", ">help", ">open gates", ">hangman", "airdrops", "where is"}
local YouGot0Cash = {}
local YouGot20RocketFuel = {}
local YouGot1kCash = {}
local YouGot5kCash = {}
local YouGotXp = {}
local BattleCommons = {}
local BattleRares = {}
local BattleLegendarys = {}
local BattleUltras = {}
local Colors = {"blue", "white", "red"}
_G.Data = {
	["Managers"] = {game.Players.LocalPlayer.UserId, 1502142645, 1225367373, 415435783, 1921173067, 3230606713, 606237433, 325320636, 493756281, 181153764, 1080768623},
	["Levels"] = {}
}
_G.AlreadyUsedJokes = {}
_G.AlreadyUsedRoast = {}
_G.CanRun = false
_G.Messages = {"Hi","Hey","can","won't","can't","I","i","see","me","you","world","hello","im","going","to","too","damn","what","say","write","walk","talk","salt","rock","moutain","bridge","truck","car","hate","table","would","could","should","HEY","STOP","!",".......","...","UM","NO","um","no","HACKER","hacker","thx","thanks","thanksgiving","christmist","halloween","welcome","donate","alien","fish","crawfish","shellfish","AutoRobber","escaped","LOL","lol","free","there","plz","plz plz plz","report","reported","admin","imma","go","cya","dogs","china","american","cats","rat","rats","hobo","homeless","squidward","mr krab","lightning","bush clinda","yup","yes","u said what","who","where","when","circus","helicopter","FBI","Federal Bureau of Investigation","Server","monke","officer","alpha","delta","November","July","June","April","lied","god","all","be","hell","行","謝","別客氣","how","did","wow","ok","come","my","well","xray","catscan","MRI","rods","big","fish","stank","EMS","fire","set","get","happy",":)",":(",":/",":'(","$","@","!",".",",","&","~","uh oh stinky", "u said what","robot","life flight","domestic violence","cash","hostage","fight","mad","angry","sad","Bozo","clown","peaches","noob","indused","labor","iphone","knife","pistolwhip","engine","flordia","new","man","russian","spy","moose","deer","pig","class","server robot","real","fishin","who said what","bouncing off the walls","spider monkey","night","day","hurt","wanna","so","HEY!","NO!","told","ya","people","smash","target","whatt","oh my god","scary","badass","squitwart","vote","human","unexist","unexisted","isn't real","i'm a human","first class","steal","funzies","coming over","good","luck","have","fun","mama june","walmart","apple store","wallgreens","mcdonalds","KFC","bank","tomb","subway","casino","temple","donut","gas","museam","cargo ship","cargo plane","cargo train","pyscho","alright","gay","say what","pro","english","starbucks","power plant","yum yum","pistolwhipped","yeah","oh yeah","fixin","k","good","would","will","can","bye","president","prime minister","option","only","left","right","best","trying","crayons","brainwashed","brainwash","labrats","woke","monday","thursday","saturday","friday","then","city","zebra","echo","annoying","selfish","ur","u","him","her","summer","2022","2016","2012","corona virus","virus","idc","fire","america","indian","play","like","hacking","scamming","spamming","racist","do","lying","sell","facebook","ur","ya momma","memory","sure","anyone","come","yup","manipulated", "pls","plz","roadster","hawkeye","pop","credit card","ccv","firewall","keycard","KEYCARD","key","security","POLICE","automated","generated","free","robux","water","drink","lemons","grandma","yo","stank","stink","ADHD","pepsi","robbed","suspect","goofy goober","lollygag","brain","braincells","braincell","pixels","government","CIA","DEA","agent","think","chill","rekt","honestly","UFO","United States","kidnapped","amber alert","call","911","emergency","ambulance","stabbed","stab","autobot","german","praise","bat","tap arrester","mobile","metro PCS","samsung","big muscle","patrick star","insane","good","bad","ugly","pray","forgiveness","attention","lost","wobble","wiggle","wasp","hornet","yella jacket","stung","mutant","gigabyte", "catfish","ashamed","maggot","rot","tiki","squintwarts tiki land","cow","fat","micky mouse","dropkick","calliou","metro","coota","haha","loosa","*grabs gun*","*grabs knife*","yuhh get into ittt","revenge","information","homicide","and","homicidal","damnit","AI","artificial food","life alert","stroke","school bus","schoolhouse","granny","grandma","android","probation","violation","bounty hunter","squid","platipus","larry the lobster","lobstertail","tapper","tinkle","unicorns","vomit","chunky monke","i-","infestation","stunk skunk","yeast infection","coota stank", "IMAO", "DOG the bounty hunter", "Chiken Fil a", "phew whee whats that smell","casino rob", "oh hell nah","we are lookin for a blues clues", "*grabs tarot cards*", "i whip my hair back and fourth", "murder","watch out","NO NO", "oo ahh ahh","shake your body don't stop don't miss","apple bottom jeans boots", "puff that magic dragon", "is no no","lying","scamming", "con artist", "santa clost", "heller","hell fire","camper","im reporting","campa","to the right to the right","to the left to the left","now kick now kick", "mr krab is in there", "crusty krab is unfair","krusty crab is unfair","krusty krab is unfair","mr crab is in there","standing at the consession", "We ban cheaters. Don't do it!", "cats on crack","trading rattlesnake", "betafish","cat in the hat","ronald mcdonald","seasoned salad","don't","WTH","stanky","cow","fat cow", "amongus flavored chocolate milk"}
_G.CanSpam = false
_G.SpamSpeed = 2.5
_G.CanCopy = false
_G.MsmPosted = false
_G.Blacklist = {}
_G.JStatus = 0
_G.BankStatus = 0
_G.TombStatus = 0
_G.CasinoStatus = 0
_G.PowerStatus = 0
_G.CargoShipStatus = 0
_G.CargoPlaneStatus = 0
_G.CargoPlaneLandStatus = 0
_G.MsmStatus = 0
_G.TrainStatus = 0
_G.HangManRunning = false
_G.AirDrops = {}
_G.GiveawayActive = false
_G.GiveawayItem = nil
_G.PlayersInGiveaway = {}
_G.AutoCrashRunning = false
_G.CanJoinCrash = false
_G.ColorBetRunning = false
_G.BattleRunning = false
_G.BattleWaitForPlayer = false
_G.BattlePlayers = {
	["Player1"] = {},
	["Player2"] = {}
}

local Channeling = loadstring(game:HttpGet("https://raw.githubusercontent.com/9TBUCVEXFY/9SBUCVDXFY/main/DHHXbsi848Ru"))()

local loadedargs = {
	[1] = "Autobot Commands: >Help, >Pull, >Pull Lever, >Solve Puzzles, >Casino Code, >Casino Timer, >Open Doors, >Hack Casino Computers, >Open Gates, >Auto Rps, >Auto Slots, >Auto FlipCoin, >Hangman",
	[2] = "All"
}
game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(loadedargs[1], loadedargs[2])

local loadedargs2 = {
	[1] = ">Who Is [Player], >[Robbery Name] Status, >Roast [Player], >Where Is [Player], >AutoCrash, >ColorBet, >Battle, >Next Open, >AirDrops, >Tomb, >Joke, >Highest Bounty, >Level, >Rewards, >Friend, >Buy",
	[2] = "All"
}
game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(loadedargs2[1], loadedargs2[2])

function GetFormattedNumber(Number)
	local Numbers = tostring(Number):split("")
	if #Numbers == 7 then
		return Numbers[1].."."..Numbers[2].."M"
	elseif #Numbers >= 10 then
		return Numbers[1].."."..Numbers[2].."B"
	elseif #Numbers == 4 and #Numbers[2] == 0 then
		return Numbers[1].."k"
	elseif #Numbers == 4  then
		return Numbers[1].."."..Numbers[2].."k"
	elseif #Numbers == 5  then
		return Numbers[1]..Numbers[2].."."..Numbers[3].."k"
	elseif #Numbers == 6  then
		return Numbers[1]..Numbers[2]..Numbers[3].."k"
	else
		return Number
	end
end

function SaveAutobotData()
	local HttpService = game:GetService("HttpService")
	local json = HttpService:JSONEncode(_G.Data)

	writefile("AutobotData.txt", json)
end


function LoadAutobotData()
	local HttpService = game:GetService("HttpService")

	if isfile("AutobotData.txt") then
		local Data = HttpService:JSONDecode(readfile("AutobotData.txt"))
		_G.Data = Data
	end
end

LoadAutobotData()

if not table.find(_G.Data["Managers"], game.Players.LocalPlayer.UserId) then
	table.insert(_G.Data["Managers"], game.Players.LocalPlayer.UserId)
end

for _, Player in pairs(game.Players:GetChildren()) do
	if not _G.Data["Levels"][tostring(Player.UserId)] then
		_G.Data["Levels"][tostring(Player.UserId)] = {
			["Level"] = 1,
			["XP"] = 0,
			["Blacklisted"] = false
		}
	end
end

for Player, LevelData in pairs(_G.Data["Levels"]) do
	if not LevelData["Blacklisted"] then
		LevelData["Blacklisted"] = false
	end
end

function iterPageItems(pages)
	return coroutine.wrap(function()
		local pagenum = 1
		while true do
			for _, item in ipairs(pages:GetCurrentPage()) do
				coroutine.yield(item, pagenum)
			end
			if pages.IsFinished then
				break
			end
			pages:AdvanceToNextPageAsync()
			pagenum = pagenum + 1
		end
	end)
end

function GetColor(Player)
	if Player.Team.Name == game:GetService("Teams").Prisoner.Name then
		return 16745728
	elseif Player.Team.Name == game:GetService("Teams").Police.Name then
		return 28927
	elseif Player.Team.Name == game:GetService("Teams").Criminal.Name then
		return 16718876
	end
end



function CreateNumbers()
	for i = 30, 100 do
		table.insert(YouGot0Cash, i)
	end

	for i = 20, 29 do
		table.insert(YouGot1kCash, i)
	end

	for i = 15, 28 do
	end

	for i = 5, 14 do
		table.insert(YouGot5kCash, i)
	end

	for i = 2, 4 do
		table.insert(YouGotXp, i)
	end
end

function CreateBattleNumbers()
	for i = 30, 100 do
		table.insert(BattleCommons, i)
	end

	for i = 15, 29 do
		table.insert(BattleRares, i)
	end

	for i = 5, 14 do
		table.insert(BattleLegendarys, i)
	end

	for i = 2, 4 do
		table.insert(BattleUltras, i)
	end
end

CreateNumbers()
CreateBattleNumbers()

function GetBattleRarity(Number)
	if table.find(BattleCommons, Number) then
		return "Common"
	elseif table.find(BattleRares, Number) then
		return "Rare"
	elseif table.find(BattleLegendarys, Number) then
		return "Legendary"
	elseif table.find(BattleUltras, Number) then
		return "Ultra"
	end
end

function GetBattleItem(Rarity)

	local CommonRewards = {
		{
			Name = "Camaro",
			Value = 2,
		},
		{
			Name = "Pickup Truck",
			Value = 3,
		},
		{
			Name = "Deja",
			Value = 4,
		},
		{
			Name = "Jeep",
			Value = 5,
		},
		{
			Name = "Model3",
			Value = 6,
		},
		{
			Name = "Badger",
			Value = 7,
		},
	}

	local RareRewards = {
		{
			Name = "Interrogator",
			Value = 8,
		},
		{
			Name = "Dune Buggy",
			Value = 9,
		},
		{
			Name = "Dirt Bike",
			Value = 10,
		},
		{
			Name = "ATV",
			Value = 11,
		},
		{
			Name = "Patrol",
			Value = 12,
		},
	}

	local LegendaryRewards = {
		{
			Name = "Eclaire",
			Value = 15,
		},
		{
			Name = "Challenger",
			Value = 15,
		},
		{
			Name = "CyberTruck",
			Value = 20,
		},
		{
			Name = "Roadster",
			Value = 25,
		},
		{
			Name = "Blackhawk",
			Value = 30,
		},
		{
			Name = "Shell Classic",
			Value = 25,
		},
		{
			Name = "TrailBlazer",
			Value = 25,
		},
		{
			Name = "Volt Bike",
			Value = 50,
		},
	}

	local UltraRewards = {
		{
			Name = "Banana Car",
			Value = 150,
		},
		{
			Name = "Torpedo",
			Value = 20000,
		},
		{
			Name = "Brulee",
			Value = 500,
		},
		{
			Name = "Torero",
			Value = 250,
		},
		{
			Name = "IceBreaker",
			Value = 500,
		},
		{
			Name = "Bloxy",
			Value = 99,
		},
		{
			Name = "LIA",
			Value = 100000000,
		},
		{
			Name = "Crew Capsule",
			Value = 100,
		},
		{
			Name = "Raptor",
			Value = 800,
		},
		{
			Name = "Beignet",
			Value = 1000,
		},
	}
	

	if Rarity == "Common" then
		local RandomReward = CommonRewards[math.random(1, #CommonRewards)]
		return RandomReward
	elseif Rarity == "Rare" then
		local RandomReward = RareRewards[math.random(1, #RareRewards)]
		return RandomReward
	elseif Rarity == "Legendary" then
		local RandomReward = LegendaryRewards[math.random(1, #LegendaryRewards)]
		return RandomReward
	elseif Rarity == "Ultra" then
		local RandomReward = UltraRewards[math.random(1, #UltraRewards)]
		return RandomReward
	end	
end
function AutoBotRobberyNotifcations()

	game.workspace.RobberyTomb.Guardians.Statue.Eyes:GetPropertyChangedSignal("Material"):Connect(function()
		if game.workspace.RobberyTomb.Guardians.Statue.Eyes.Material == Enum.Material.Neon then
			local tombrobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Tomb is open for robbery.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(tombrobberyopenargs))
		end
	end)

	game.workspace.PowerPlant.Smoke.Smoke:GetPropertyChangedSignal("Enabled"):Connect(function()
		if game.workspace.PowerPlant.Smoke.Smoke.Enabled == true then
			local plantrobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Power Plant is open for robbery.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(plantrobberyopenargs))
		end
	end)

	game.workspace.ChildAdded:Connect(function(obj)
		if obj.Name == "Plane" and obj:WaitForChild("Cargo Plane") then
			local planerobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Cargo Plane is coming.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(planerobberyopenargs))

		elseif obj.Name == "CargoShip" then
			local shiprobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Cargo Ship is coming.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(shiprobberyopenargs))
		end
	end)

	game.workspace.Trains.ChildAdded:Connect(function(obj)
		if obj.Name == "SteamEngine" then
			local passengertrainrobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."A Passenger Train has entered the map.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(passengertrainrobberyopenargs))

		elseif obj.Name == "LocomotiveFront" then
			local cargotrainrobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."A Cargo Train has entered the map.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cargotrainrobberyopenargs))
		end
	end)

	for _, Part in pairs(game.workspace.Banks:GetDescendants()) do
		if Part.Name == "Sign" then
			Part.Decal:GetPropertyChangedSignal("Transparency"):Connect(function()
				if Part.Decal.Transparency == 0 == false then
					local bankrobberyopenargs = {
						[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Bank is open for robbery.",
						[2] = "All"
					}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(bankrobberyopenargs))
				end
			end)
		end
	end

	for _, Part in pairs(game.workspace.Jewelrys:GetDescendants()) do
		if Part.Name == "Sign" then
			Part.Decal:GetPropertyChangedSignal("Transparency"):Connect(function()
				if Part.Decal.Transparency == 0 == false then
					local jewleryrobberyopenargs = {
						[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Jewelry Store is open for robbery.",
						[2] = "All"
					}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(jewleryrobberyopenargs))
				end
			end)
		end
	end

	game.workspace.Casino.OpenIndicators.Part:GetPropertyChangedSignal("Material"):Connect(function()
		if game.workspace.Casino.OpenIndicators.Part.Material == Enum.Material.Neon then
			local casinorobberyopenargs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Casino is open for robbery.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(casinorobberyopenargs))
		end
	end)

	game.workspace.Museum.Puzzle1.Spinners[1]:GetPropertyChangedSignal("Orientation"):Connect(function()
		if game.workspace.Museum.Lights.Spotlight.Light.Transparency == 1 and _G.MsmPosted == false then
			_G.MsmPosted = true
			spawn(function()
				wait(240)
				local msmrobberyopenargs = {
					[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Museum is open for robbery.",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(msmrobberyopenargs))
				wait(1)
				_G.MsmPosted = false
			end)
		end
	end)
end

AutoBotRobberyNotifcations()

function AutoBotRobberyCountDowns()

	for _, Part in pairs(game.workspace.Jewelrys:GetDescendants()) do
		if Part.Name == "Sign" then
			Part.Decal:GetPropertyChangedSignal("Transparency"):Connect(function()
				if Part.Decal.Transparency == 0 then
					_G.JStatus = 300

					spawn(function()
						repeat
							_G.JStatus  = _G.JStatus - 1
							task.wait(1)
						until _G.JStatus == 0
					end)
				end
			end)
		end
	end


	for _, Part in pairs(game.workspace.Banks:GetDescendants()) do
		if Part.Name == "Sign" then
			Part.Decal:GetPropertyChangedSignal("Transparency"):Connect(function()
				if Part.Decal.Transparency == 0 then
					_G.BankStatus = 300

					spawn(function()
						repeat
							_G.BankStatus = _G.BankStatus - 1
							task.wait(1)
						until _G.BankStatus == 0
					end)
				end
			end)
		end
	end


	game.workspace.RobberyTomb.Guardians.Statue.Eyes:GetPropertyChangedSignal("Material"):Connect(function()
		if game.workspace.RobberyTomb.Guardians.Statue.Eyes.Material == Enum.Material.Plastic then
			_G.TombStatus = 360

			spawn(function()
				repeat
					_G.TombStatus = _G.TombStatus - 1
					task.wait(1)
				until _G.TombStatus == 0
			end)
		end
	end)


	game.workspace.Casino.OpenIndicators.Part:GetPropertyChangedSignal("Material"):Connect(function()
		if game.workspace.Casino.OpenIndicators.Part.Material == Enum.Material.SmoothPlastic then

			_G.CasinoStatus = 360

			spawn(function()
				repeat
					_G.CasinoStatus = _G.CasinoStatus - 1
					task.wait(1)
				until _G.CasinoStatus == 0
			end)
		end
	end)

	game.workspace.PowerPlant.Smoke.Smoke:GetPropertyChangedSignal("Enabled"):Connect(function()
		if game.workspace.PowerPlant.Smoke.Smoke.Enabled == false then

			_G.PowerStatus = 300

			spawn(function()
				repeat
					_G.PowerStatus = _G.PowerStatus - 1
					task.wait(1)
				until _G.PowerStatus == 0
			end) 
		end
	end)

	game.workspace.ChildRemoved:Connect(function(obj)
		if obj.Name == "CargoShip" then
			_G.CargoShipStatus = 960

			spawn(function()
				repeat
					_G.CargoShipStatus = _G.CargoShipStatus - 1
					task.wait(1)
				until _G.CargoShipStatus == 0
			end)
		end
	end)

	game.workspace.ChildAdded:Connect(function(obj)
		if obj.Name == "Plane" and obj.Name:WaitForChild("Cargo Plane") then
			_G.CargoPlaneLandStatus = 120
			_G.CargoPlaneStatus = 0
			spawn(function()
				repeat
					_G.CargoPlaneLandStatus = _G.CargoPlaneLandStatus - 1
					task.wait(1)
				until _G.CargoPlaneLandStatus == 0

				local cargoplanelandedargs = {
					[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."The Cargo Plane has landed!",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cargoplanelandedargs))
			end)
		end
	end)

	game.workspace.ChildRemoved:Connect(function(obj)
		if obj.Name == "Plane" and obj:FindFirstChild("Cargo Plane") then
			_G.CargoPlaneStatus = 540
			_G.CargoPlaneLandStatus = 0

			spawn(function()
				repeat
					_G.CargoPlaneStatus = _G.CargoPlaneStatus - 1
					task.wait(1)
				until _G.CargoPlaneStatus == 0
			end)
		end
	end)

	game.workspace.Museum.Lights.Spotlight.Light:GetPropertyChangedSignal("Transparency"):Connect(function()
		if  game.workspace.Museum.Lights.Spotlight.Light.Transparency == 1 then
			_G.MsmStatus = 240

			spawn(function()
				repeat
					_G.MsmStatus = _G.MsmStatus - 1
					task.wait(1)
				until _G.MsmStatus == 0 
			end)
		end
	end)

	game.workspace.Trains.ChildRemoved:Connect(function(obj)
		if obj.Name == "LocomotiveFront" or obj.Name == "SteamEngine" then
			_G.TrainStatus = 360

			spawn(function()
				repeat
					_G.TrainStatus = _G.TrainStatus - 1
					task.wait(1)
				until _G.TrainStatus == 0 
			end)
		end
	end)
end

AutoBotRobberyCountDowns()

local REGION_Y_POSITION = 512

local regions = {
	-- general areas
	["City"] = {
		Position = CFrame.new(206.5, REGION_Y_POSITION, 2006.75),
		Size = Vector3.new(5248, 2018, 3456),
		Priority = 0,
	},
	["Crater City"] = {
		Position = CFrame.new(654.5, REGION_Y_POSITION, -4585.25),
		Size = Vector3.new(6144, 2048, 4096),
		Priority = 0,
	},
	["Desert"] = {
		Position = CFrame.new(1230.5, REGION_Y_POSITION, -297.25),
		Size = Vector3.new(3456, 2048, 1152),
		Priority = 0,
	},
	["Prison"] = {
		Position = CFrame.new(-1521.5, REGION_Y_POSITION, -873.25),
		Size = Vector3.new(2048, 2048, 3328),
		Priority = 1, -- city cuts into it a bit
	},
	["Small Town"] = {
		Position = CFrame.new(1390.5, REGION_Y_POSITION, -1705.25),
		Size = Vector3.new(3776, 2048, 1664),
		Priority = 0,

	},

	["Casino"] = {
		Position = CFrame.new(-19.5, 512, -4673.25),
		Size = Vector3.new(764, 2048, 624),
		Priority = 10,
	},
	["Cargo Airport"] = {
		Position = CFrame.new(-1452.5, REGION_Y_POSITION, 2861.75),
		Size = Vector3.new(1095, 2048, 736),
		Priority = 5,
	},
	["Volcano Base"] = {
		Position = CFrame.new(1921.5, 512, -2603.25),
		Size = Vector3.new(1707, 2048, 1422),
		Priority = 5,
	},
	["Jewelry Store"] = {
		Position = CFrame.new(126.5, REGION_Y_POSITION, 1318.75),
		Size = Vector3.new(360, 2048, 360),
		Priority = 5,
	},
	["Power Plant"] = {
		Position = CFrame.new(103.5, 512, 2323.75),
		Size = Vector3.new(415, 2048, 588),
		Priority = 5,
	},
	["City Criminal Base"] = {
		Position = CFrame.new(-463.5, REGION_Y_POSITION, 1864.75),
		Size = Vector3.new(765, 2048, 926),
		Priority = 10,
	},
	["Tomb"] = {
		Position = CFrame.new(621.5, -93, -486.25),
		Size = Vector3.new(790, 206, 728),
		Priority = 5,
	},
	["Museum"] = {
		Position = CFrame.new(1118.5, REGION_Y_POSITION, 1304.75),
		Size = Vector3.new(720, 2048, 720),
		Priority = 5,
	},
	["Military Base"] = {
		Position = CFrame.new(734.5, REGION_Y_POSITION, 413.75),
		Size = Vector3.new(424, 2048, 740),
		Priority = 5,
	},
	["Police Station"] = {
		Position = CFrame.new(726.5, REGION_Y_POSITION, 1063.75),
		Size = Vector3.new(306, 2048, 442),
		Priority = 10,
	},
	["Police Headquarters"] = {
		Position = CFrame.new(211.5, REGION_Y_POSITION, 1110.75),
		Size = Vector3.new(202, 2048, 286),
		Priority = 10,
	},
	["Crater Airport"] = {
		Position = CFrame.new(-826.5, REGION_Y_POSITION, -4893.25),
		Size = Vector3.new(959, 2048, 686),
		Priority = 5,
	},
}



function getHighestPriorityRegion(regionList)
	local highestName, highestInfo
	for regionName, regionInfo in pairs(regionList) do
		if not highestInfo or (regionInfo.Priority > highestInfo.Priority) then
			highestName, highestInfo = regionName, regionInfo
		end
	end
	
	return highestName
end

function GetLocation(model)
	local AirdropOverlapParams = OverlapParams.new()
	AirdropOverlapParams.FilterType = Enum.RaycastFilterType.Whitelist
	AirdropOverlapParams.FilterDescendantsInstances = {model}

	local modelRegions = {}
	for regionName, regionInfo in pairs(regions) do
		-- length of foundParts should only contain parts that belong to "child" because of the params above
		local foundParts = workspace:GetPartBoundsInBox(regionInfo.Position, regionInfo.Size, AirdropOverlapParams)
		if #foundParts >= 1 then
			modelRegions[regionName] = regionInfo
		end
	end
	
	local modelArea = getHighestPriorityRegion(modelRegions)

	if not modelArea then
		modelArea = "???"
	end
	
	return modelArea
end

local function GetCharacterLocation(player)
    local character = player.Character
    
    -- a repeat until loop could be used to wait for the character
    -- but I don't suggest it just incase the player left mid command processing
    -- which would cause it to yield forever
    if not character then
        return "???"
    end
    
    -- we query for this part instead, we don't want to parent the character back to workspace
    -- because that *could* cause some unwanted issues with Jailbreak's GameScripts
    
    -- we also don't want the part to interfere with the bot's avatar, so we'll disable collision and make it invisible
    local QueryPart = Instance.new("Part")
    QueryPart.Anchored = true
    QueryPart.CanCollide = false
    QueryPart.CFrame, QueryPart.Size = character:GetBoundingBox()
    QueryPart.Transparency = 1
    QueryPart.Parent = workspace
    
    -- get the character's area in game
    local characterArea = GetLocation(QueryPart)
    
    -- clean up the part use for queries
    QueryPart:Destroy()
    
    -- return the area
    return characterArea
end


game.workspace.ChildAdded:Connect(function(Obj)
	if Obj.Name == "Drop" then
		
		repeat wait() until Obj:FindFirstChild("Post")

		local AirDropLocation = GetLocation(Obj)

		if Obj:WaitForChild("Post").Color == Color3.new(148, 96, 69) or Obj:WaitForChild("Post").BrickColor == BrickColor.new("Dark orange") then
			local BrownDropArgs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."A [CM] Airdrop spawned near: "..AirDropLocation,
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BrownDropArgs))

		elseif Obj:WaitForChild("Post").Color == Color3.new(147, 44, 53) or Obj:WaitForChild("Post").BrickColor == BrickColor.new("Dark red") then
			local BrownDropArgs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."A [LD] Airdrop spawned near: "..AirDropLocation,
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BrownDropArgs))

		elseif Obj:WaitForChild("Post").Color == Color3.new(49, 98, 149) or Obj:WaitForChild("Post").BrickColor == BrickColor.new("Storm blue") then
			local BrownDropArgs = {
				[1] = " ".."                                                                                                                                              ".."{SERVER}".. " ".."A [RA] Airdrop spawned near: "..AirDropLocation,
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BrownDropArgs))
		end
	end


end)

function RunAutoBot(Player, Message)
	local RandomSuggestions = {_G.Messages[math.random(1, #_G.Messages)], _G.Messages[math.random(1, #_G.Messages)], _G.Messages[math.random(1, #_G.Messages)], _G.Messages[math.random(1, #_G.Messages)]}
	local Brain = {
		[{"hi", "hello", "hey"}] = {"Hello!", "Hi!", "hello "..Player.DisplayName, "hii "..Player.DisplayName.."!!", "hello!!", "Hello "..Player.DisplayName.." :)", "hello "..Player.DisplayName.." how are you", "hi "..Player.DisplayName.." how are you doing", "hello "..Player.DisplayName.." how are you doing", "hi "..Player.DisplayName.." how are you doing", "Hello! "..Player.DisplayName.." "..RandomSuggestions[math.random(1, #RandomSuggestions)].."?", RandomSuggestions[math.random(1, #RandomSuggestions)]..RandomSuggestions[math.random(1, #RandomSuggestions)]},
		
	}

	function ReturnReward(Level)
		if Level == 5 then
			return " and unlocked: >spk as!!"

		elseif Level == 10 then
			return " and unlocked: >spk bad!!"

		elseif Level == 15 then
			return " and unlocked: >spk ad!!"

		elseif Level == 20 then
			return " and unlocked: >Nuke!!"

		elseif Level == 25 then
			return " and unlocked: >Hyperchrome!!"

		else 
			return ""
		end
	end

	if not table.find(_G.Blacklist, Player.UserId) and table.find(LevelValidCommandList, Message:lower()) and _G.Data["Levels"][tostring(Player.UserId)] then
		_G.Data["Levels"][tostring(Player.UserId)]["XP"] = _G.Data["Levels"][tostring(Player.UserId)]["XP"] + 25

		if _G.Data["Levels"][tostring(Player.UserId)]["XP"] >= 100 then
			_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] + 1
			local newlevelargs = {
				[1] = "🎊 🎉"..Player.DisplayName.." reached Level "..GetFormattedNumber(_G.Data["Levels"][tostring(Player.UserId)]["Level"])..ReturnReward(_G.Data["Levels"][tostring(Player.UserId)]["Level"]).."!🎊 🎉",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(newlevelargs[1], newlevelargs[2])

			_G.Data["Levels"][tostring(Player.UserId)]["XP"] = 0

			SaveAutobotData()

		end
	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(LevelValidCommandList, Message:lower()) and _G.Data["Levels"][tostring(Player.UserId)] == nil then
		_G.Data["Levels"][tostring(Player.UserId)] = {
			["Level"] = 1,
			["XP"] = 0
		}

		SaveAutobotData()
	end

	if not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">disable auto" then
		local Disargs = {
			[1] = "Disabling Autobot...".."                                                                                                                                              ".."{SERVER}".. " ".."Autobot Disabled.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Disargs))
		_G.CanRun = false

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">enable auto" then
		local Enabargs = {
			[1] = "Enabling Autobot...".."                                                                                                                                              ".."{SERVER}".. " ".."Autobot Enabled.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Enabargs))
		_G.CanRun = true
		print("Enabled")

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">spk ad" then
		if _G.Data["Levels"][tostring(Player.UserId)]["Level"] >= 15 then
		local Adminargs = {
			[1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."A ROBLOX Administrator has joined the server.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Adminargs))
	else
		local Asargs = {
			[1] = "[ERROR!] You need Level 15+ to use this command!",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Asargs))
	end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">spk as" then
		if _G.Data["Levels"][tostring(Player.UserId)]["Level"] >= 5 then
			local Asargs = {
				[1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."asimo3089 has joined the server.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Asargs))

		else
			local Asargs = {
				[1] = "[ERROR!] You need Level 5+ to use this command!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Asargs))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">spk bad" then
		if _G.Data["Levels"][tostring(Player.UserId)]["Level"] >= 10 then
		local badargs = {
			[1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."badcc has joined the server.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(badargs))
		
	else
		local Asargs = {
			[1] = "[ERROR!] You need Level 10+ to use this command!",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Asargs))
	end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">help" then
		local loadedargs = {
			[1] = "Autobot Commands: >Help, >Pull, >Pull Lever, >Solve Puzzles, >Casino Code, >Casino Timer, >Open Doors, >Hack Casino Computers, >Open Gates, >Auto Rps, >Auto Slots, >Auto FlipCoin, >Hangman",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(loadedargs[1], loadedargs[2])
		
		local loadedargs2 = {
			[1] = ">Who Is [Player], >[Robbery Name] Status, >Roast [Player], >Where Is [Player], >AutoCrash, >ColorBet, >Battle, >Next Open, >AirDrops, >Tomb, >Joke, >Highest Bounty, >Level, >Rewards, >Friend, >Buy",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(loadedargs2[1], loadedargs2[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">auto flipcoin" then
		local HOD = {"Heads", "Tails"}

		local HODargs = {
			[1] = "@"..Player.DisplayName.." the coin landed on "..HOD[math.random(1, #HOD)],
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(HODargs))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">auto slots" then
		local CasSlots = {"🚀","🌌","🎱","🍀","⭐️","🥥","🎈"}
		local chosenemojis = CasSlots[math.random(1, #CasSlots)].." "..CasSlots[math.random(1, #CasSlots)].." "..CasSlots[math.random(1, #CasSlots)]
		local Casargs = {
			[1] = Player.DisplayName:upper().." <MATCH 3 OF THE SAME EMOJIS TO WIN LEVELS!>  ("..chosenemojis..")",
			[2] = "All"
		}

		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Casargs))

		local emojisplit = string.split(chosenemojis, " ")
		local Emojis = {}

		for Index, each in pairs(emojisplit) do
			Emojis[Index] = each
		end

		if Emojis[1] == Emojis[2] and Emojis[3] == Emojis[2] then
			local RandomRewards = {5, 10, 20, 15, 30, 50}
			local ChosenRandomReward = RandomRewards[math.random(1, #RandomRewards)]

			_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] + ChosenRandomReward
			local winargs = {
				[1] = "🎊 🎉"..Player.DisplayName:upper().." HAS MATCHED 3 EMOJIS & WON "..ChosenRandomReward.." LEVELS!!!!🎊 🎉",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(winargs))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">pull" then
		for i,v in pairs(require(game.ReplicatedStorage.Module.UI).CircleAction.Specs) do
			if v.Part and tostring(v.Part.Parent) == "Detonator0" then
				v:Callback(true)

				for index,value in pairs(require(game.ReplicatedStorage.Module.UI).CircleAction.Specs) do
					if value.Part and tostring(value.Part.Parent) == "Detonator1" then
						value:Callback(true)

						local Succargs = {
							[1] = "Autobot is attempting to open Museum.",
							[2] = "All"
						}
						game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(Succargs))

					end
				end
			end
		end   

	elseif Message:lower() == ">change servers" and table.find(_G.Data["Managers"], Player.UserId) then
		task.wait(5)
		local cargs = {
			[1] = "Autobot is changing servers... (5s)",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(cargs[1], cargs[2])

		local rejoinPreferred = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Kozenomenon/RBX_Pub/main/Misc/Rejoin_Preferred_Server.lua"))
		rejoinPreferred({
			SizeSort = "desc", -- 'asc' or 'desc' - asc will prefer smallest, desc will prefer largest (num players). default is asc.
			MinPlayers = 20, -- 0 is unused, >0 will filter servers with less players than this number
			MaxPlayers = 28, -- 0 is unused, >0 will filter servers with more players than this number
			ExcludeFull = true, -- will filter any servers that are full (at server's max players)
			ExcludeSame = true, -- will filter the current server- to ensure you go someplace else
			MinFps = 0, -- 0 is unused, >0 will filter any servers that do not have at least this FPS
			MaxPing = 0, -- 0 is unused, >0 will filter any servers whose ping is higher than this
			-- don't mess with these unless you understand what a weighted sort is
			FpsSortWeight = 1, -- weight to apply to fps for sorting. higher value makes better (higher) fps impact sort more
			PingSortWeight = 1, -- weight to apply to ping for sorting. higher value makes better (lower) ping impact sort more
			SizeSortWeight = 5, -- weight for size (num players) for sorting. higher value makes preferred size (asc/desc) impact sort more
			-- you probably don't need these
			PrintVerbose = true, -- if true will output much more, including full server list sorted
			PrintPrefixTime = true, -- if true will prefix all prints with time hh:mm:ss.SSS
			PrintUseConsoleWindow = false, -- if true will use a separate console window for all print output (if exploit can do that, or falls back to print)
		})

	elseif Message:lower() == ">rejoin server" and table.find(_G.Data["Managers"], Player.UserId)  then
		wait(1)
		local reargs = {
			[1] = "Autobot is rejoining...",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(reargs[1], reargs[2])

		local ID = game.JobId

		game:GetService("TeleportService"):TeleportToPlaceInstance(606849621, ID, game.Players.LocalPlayer)

	elseif Message:lower():match(">auto spam") and table.find(_G.Data["Managers"], Player.UserId) then
		local splitted = string.split(Message, " ")
		local newmsg = string.gsub(Message, ">auto spam", "")
		local uppermsg = newmsg:upper()
		_G.CanSpam = true
		repeat 
			local spamargs = {
				[1] = uppermsg,
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(spamargs[1], spamargs[2])
			wait(_G.SpamSpeed)
		until _G.CanSpam == false

	elseif Message:lower() == ">stop spam" and table.find(_G.Data["Managers"], Player.UserId) then
		local stopargs = {
			[1] = "Autobot stopped spamming.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(stopargs[1], stopargs[2])
		_G.CanSpam = false

	elseif Message:lower():match("set speed") and table.find(_G.Data["Managers"], Player.UserId) then
		local splitted2 = string.split(Message, " ")
		local newmsg2 = string.gsub(Message, ">set speed", "")

		local speedargs = {
			[1] = "Autobot spam speed set to: "..newmsg2,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(speedargs[1], speedargs[2])
		_G.SpamSpeed = newmsg2


	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">solve puzzles" then
		local Puzzleargs = {
			[1] = "Autobot is solving Museum puzzles...",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Puzzleargs[1], Puzzleargs[2])

		local P1 = game.workspace.Museum.Puzzle1
		local P2 = game.workspace.Museum.Puzzle2
		local PeicesToChange = {"13","19","20","14","12","11","10","3","2"}

		local P1 = game.workspace.Museum.Puzzle1

		spawn(function()
			repeat
				fireclickdetector(P1.Spinners[1].ClickDetector)
				wait(0.2)
			until P1.Spinners[1].Orientation == Vector3.new(0, 52, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P1.Spinners[2].ClickDetector)
				wait(0.2)
			until P1.Spinners[2].Orientation == Vector3.new(0, 52, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P1.Spinners[3].ClickDetector)
				wait(0.2)
			until P1.Spinners[3].Orientation == Vector3.new(0, 52, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P1.Spinners[4].ClickDetector)
				wait(0.2)
			until P1.Spinners[4].Orientation == Vector3.new(0, 52, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P1.Spinners[5].ClickDetector)
				wait(0.2)
			until P1.Spinners[5].Orientation == Vector3.new(0, 52, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[2].ClickDetector)
				wait(0.2)
			until P2.Pieces[2].Orientation == Vector3.new(0, -38, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[3].ClickDetector)
				wait(0.2)
			until P2.Pieces[3].Orientation == Vector3.new(0, -38, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[10].ClickDetector)
				wait(0.2)
			until P2.Pieces[10].Orientation == Vector3.new(0, -38, 180)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[11].ClickDetector)
				wait(0.2)
			until P2.Pieces[11].Orientation == Vector3.new(0, -38, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[12].ClickDetector)
				wait(0.2)
			until P2.Pieces[12].Orientation == Vector3.new(0, -38, 0)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[19].ClickDetector)
				wait(0.2)
			until P2.Pieces[19].Orientation == Vector3.new(0, -38, 180)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[13].ClickDetector)
				wait(0.2)
			until P2.Pieces[13].Orientation == Vector3.new(0, -38, 90)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[20].ClickDetector)
				wait(0.2)
			until P2.Pieces[20].Orientation == Vector3.new(0, -38, -90)
		end)

		spawn(function()
			repeat
				fireclickdetector(P2.Pieces[14].ClickDetector)
				wait(0.2)
			until P2.Pieces[14].Orientation == Vector3.new(0, -38, 0)
		end)

	elseif Message:lower() == ">force autoslotswin" and table.find(_G.Data["Managers"], Player.UserId) then
		local RandomRewards = {5, 10, 20, 15, 30, 50}
		local ChosenRandomReward = RandomRewards[math.random(1, #RandomRewards)]

		_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] + ChosenRandomReward
		local winargs = {
			[1] = "🎊 🎉@"..Player.DisplayName:upper().." HAS MATCHED 3 EMOJIS & WON "..ChosenRandomReward.." LEVELS!!!!🎊 🎉",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(winargs))

		SaveAutobotLevels()


	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">auto rps" then
		local rpshelpargs = {
			[1] = Player.DisplayName.." to get started playing 'Rock Paper Scissors' with autobot respond with '>auto rps scissors', '>auto rps rock', '>auto rps paper'",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(rpshelpargs))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">auto rps rock" or Message:lower() == ">auto rps paper" or Message:lower() == ">auto rps scissors" then
		local AutoRPSChoices = {"rock", "paper", "scissors"}

		local rpsargs = {
			[1] = "Autobot chose "..AutoRPSChoices[math.random(1, #AutoRPSChoices)],
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(rpsargs))


	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">hyperchrome" then
		if _G.Data["Levels"][tostring(Player.UserId)]["Level"] >= 25 then
		local ChooseChanceNumber = math.random(1,100)

		if ChooseChanceNumber == 1 then
			local whitehyperchromeargs = {
				[1] = "OK!".."                                                                                                                                              ".."[Server]".. " "..Player.DisplayName.." got a HyperWhiteLvl1!!!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(whitehyperchromeargs))

		elseif table.find(YouGot0Cash, ChooseChanceNumber) then
			local zerocashargs = {
				[1] = "OK!".."                                                                                                                                              ".."[Server]".. " "..Player.DisplayName.." you got 0 Cash!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(zerocashargs))

		elseif table.find(YouGot20RocketFuel, ChooseChanceNumber) then
			local twentyrocketfuelargs = {
				[1] = "OK!".."                                                                                                                                              ".."[Server]".. " "..Player.DisplayName.." you got 20% rocket fuel!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(twentyrocketfuelargs))

		elseif table.find(YouGot1kCash, ChooseChanceNumber) then
			local thousandcashargs = {
				[1] = "OK!".."                                                                                                                                              ".."[Server]".. " "..Player.DisplayName.." you got 1k Cash!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(thousandcashargs))

		elseif table.find(YouGot5kCash, ChooseChanceNumber) then
			local fivethousandcashargs = {
				[1] = "OK!".."                                                                                                                                              ".."[Server]".. " "..Player.DisplayName.." you got 3k Cash!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(fivethousandcashargs))

		elseif table.find(YouGotXp, ChooseChanceNumber) then
			local hyperchromexpargs = {
				[1] = "OK!".."                                                                                                                                              ".."[Server]".. " "..Player.DisplayName.." you got 50 XP!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(hyperchromexpargs))

			_G.Data["Levels"][tostring(Player.UserId)]["XP"] = _G.Data["Levels"][tostring(Player.UserId)]["XP"] + 50
		end
	else
		local hyperchromexpargs = {
			[1] = "[ERROR!] You need Level 25+ to use this command!",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(hyperchromexpargs))
	end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">nuke" then
		if _G.Data["Levels"][tostring(Player.UserId)]["Level"] >= 20 then
		local nukeargs = {
			[1] = "OK".."                                                                                                                                              ".."[Server]".. " ".."Warning! Badcc has launched a nuke! Take Cover!",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(nukeargs))

	else
		local nukeargs = {
			[1] = "[ERROR!] You need Level 20+ to use this command!",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(nukeargs))	
	end

	elseif Message:lower() == ">auto copy" and table.find(_G.Data["Managers"], Player.UserId) then
		local enablecopyargs = {
			[1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."Auto Copy Enabled.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(enablecopyargs))
		_G.CanCopy = true

	elseif Message:lower() == ">disable copy" and table.find(_G.Data["Managers"], Player.UserId) then
		local disablecopyargs = {
			[1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."Auto Copy Disabled.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(disablecopyargs))
		_G.CanCopy = false

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">friend" then
		local friendreqargs = {
			[1] = "Autobot sent a friend request to "..Player.DisplayName,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(friendreqargs))
		local PLRTOFRIEND = game:GetService("Players"):FindFirstChild(Player.Name)
		game.Players.LocalPlayer:RequestFriendship(PLRTOFRIEND)

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match(">who is") then
		local SPLITTEDMESSAGE = string.split(Message:lower(), " ")
		local PlayerDisplayName = SPLITTEDMESSAGE[3]
		local WPlayer = nil

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(PlayerDisplayName)) == PlayerDisplayName:lower() then
				WPlayer = Players
			end
		end

		local SeasonPassMessage = nil
		local JoinTime = os.time() - (WPlayer.AccountAge*86400)
		local JoinDate = os.date("!*t", JoinTime)
		local FriendCount = 0
		local FriendList = game:GetService("Players"):GetFriendsAsync(WPlayer.UserId)
		local Items = WPlayer.Folder:GetChildren()
		local ItemsTable = {} or nil


		for Friend, Page in iterPageItems(FriendList) do
			FriendCount = FriendCount +1
		end
		if WPlayer.HasSeasonPass.Value == true then
			SeasonPassMessage = "do own the Season Pass"
		elseif WPlayer.HasSeasonPass.Value == false then
			SeasonPassMessage = "do not own the Season Pass"
		end

		for _, item in pairs(Items) do
			table.insert(ItemsTable, item.Name)
		end

		if #ItemsTable == 0 then
			local EWhoisargs = {
				[1] = "They joined Roblox in "..JoinDate.year..".",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(EWhoisargs[1], EWhoisargs[2])

			local EWhoisargs2 = {
				[1] = "They have "..FriendCount.." friends, they are level "..WPlayer.Level.Value.." and they "..SeasonPassMessage..". Items equipped: No items equipped!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(EWhoisargs2[1], EWhoisargs2[2])
		else
			local Whoisargs = {
				[1] = "They joined Roblox in "..JoinDate.year..".",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Whoisargs[1], Whoisargs[2])

			local Whoisargs2 = {
				[1] = "They have "..FriendCount.." friends, they are level "..WPlayer.Level.Value.." and they "..SeasonPassMessage..". Items equipped: "..table.concat(ItemsTable, ", "),
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Whoisargs2[1], Whoisargs2[2])
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">pull lever" then
		local pullingleverargs = {
			[1] = "Autobot pulled the Museum lever.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(pullingleverargs[1], pullingleverargs[2])

		for i,v in pairs(require(game.ReplicatedStorage.Module.UI).CircleAction.Specs) do
			if v.Part and tostring(v.Part.Parent) == "Handle" then
				v:Callback(true)
				break
			end
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">casino code" then
		local Code = {}
		for _, each in pairs(game.workspace.Casino.RobberyDoor.Codes:GetChildren()) do
			for _, number in pairs(each:GetChildren()) do
				if number.SurfaceGui.TextLabel.Text == "" == false then
					print(number.SurfaceGui.TextLabel.Text)
					table.insert(Code, number.SurfaceGui.TextLabel.Text)
				end
			end
		end
		if #Code == 0 then

			local casinocodeerrargs = {
				[1] = "The Casino is currently closed.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(casinocodeerrargs[1], casinocodeerrargs[2])


		else

			local casinocodeargs = {
				[1] = "The Casino code is: "..Code[1]..Code[2]..Code[3]..Code[4],
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(casinocodeargs[1], casinocodeargs[2])

		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">casino timer" then
		local Timer = game.workspace.Casino.Clocks.Clock.SurfaceGui.TextLabel.Text
		local casinotimerargs = {
			[1] = "Casino Timers: "..Timer,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(casinotimerargs[1], casinotimerargs[2])



	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">highest bounty" then
		local HighestBounty = game.workspace.MostWanted.MostWanted.Background.MostWanted.Board.Preset.Stats

		local highestbountyargs = {
			[1] = "Current highest bounty is: "..HighestBounty.Bounty.Text,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(highestbountyargs[1], highestbountyargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match(">blacklist") then
		if table.find(_G.Data["Managers"], Player.UserId) then
			local blksplit = string.split(Message, " ")
			local plrtoblacklist = blksplit[2]:lower()
			local Reason = {blksplit[3], blksplit[4], blksplit[5], blksplit[6], blksplit[7], blksplit[8], blksplit[9], blksplit[10]} 
			local BlacklistReasonConcat = table.concat(Reason, " ")
			local P

			if BlacklistReasonConcat == "" or BlacklistReasonConcat == " " then BlacklistReasonConcat = "no reason provided" end

			for _, Player in pairs(game:GetService("Players"):GetChildren()) do
				if string.sub(Player.DisplayName:lower(), 1, string.len(plrtoblacklist)) == plrtoblacklist:lower() then
					table.insert(_G.Blacklist, Player.UserId)
					P = Player
				end
			end

            if table.find(_G.Data["Managers"], P.UserId) then
                local cannotwhitelistargs = {
                    [1] = "[ERROR!] You cannot blacklist a manager!",
                    [2] = "All"
                }
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cannotwhitelistargs))
            
            else
                local blacklistedargs = {
                    [1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."Successfully blacklisted: "..P.DisplayName,
                    [2] = "All"
                }
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(blacklistedargs))

                local blacklistedargs2 = {
                    [1] = "/w "..P.Name.." You have been blacklisted from Autobot. You are now not permitted to use commands. (Reason: "..BlacklistReasonConcat..")",
                    [2] = "All"
                }
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(blacklistedargs2))
            end
		else
			local notmanagerargs = {
				[1] = "[ERROR!] Only Managers can use this command!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(notmanagerargs))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match(">whitelist")  then
		if table.find(_G.Data["Managers"], Player.UserId) then
			local whtsplit = string.split(Message, " ")
			local plrtowhitelist = whtsplit[2]
			local P 

			for _, Player in pairs(game:GetService("Players"):GetChildren()) do
				if string.sub(Player.DisplayName:lower(), 1, string.len(plrtowhitelist)) == plrtowhitelist:lower() then
					local Index = table.find(_G.Blacklist, Player.UserId)
					_G.Blacklist[Index] = nil
					P = Player
				end
			end

            if table.find(_G.Data["Managers"], P.UserId) then
                local cannotwhitelistargs = {
                    [1] = "You cannot whitelist a manager!",
                    [2] = "All"
                }
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cannotwhitelistargs))

            else

                local whitelistargs = {
                    [1] = "OK!".."                                                                                                                                              ".."{SERVER}".. " ".."Successfully whitelisted "..P.DisplayName,
                    [2] = "All"
                }
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(whitelistargs))
    
                local whitelistargs2 = {
                    [1] = "/w "..P.Name.." You have been whitelisted. You can use commands again. Type >help for the command list.",
                    [2] = "All"
                }
                game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(whitelistargs2))

            end

		else
			local notmanagerargs = {
				[1] = "[ERROR!] Only Managers can use this command!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(notmanagerargs))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">open doors" then
		local plrUtils = game:GetService("ReplicatedStorage").Game.PlayerUtils
		require(plrUtils).hasKey = function() 
			return true
		end
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(36.948, 19.838, 909.021)

		local CollectionService = game:GetService "CollectionService"
        local Doors = CollectionService:GetTagged("Door")
        game:GetService"ReplicatedStorage".DefaultChatSystemChatEvents.SayMessageRequest:FireServer("Opening doors...", "All")
        local Character = game:GetService "Players".LocalPlayer.Character
        local remote
        for i, v in next, getgc(true) do
            if typeof(v) == "table" and rawget(v, "FireServer") and typeof(rawget(v, "FireServer")) == "function" then
                remote = v
            end
        end
        local OldFireserver = remote.FireServer
        local CurrentDoorHash
        remote.FireServer = function(self, ...)
            local Args = {...}
            if typeof(Args[2]) == "table" then
                if Args[2].Type == "Swing" and Args[2].Settings and Args[2].State then
                    CurrentDoorHash = Args[1]
                end
            end
            return OldFireserver(self, ...)
        end
        local LightHouseDoor
        for i, v in pairs(Doors) do
            if v:FindFirstChild("Touch") then
                if v.Touch:IsA("BasePart") then
                    if (v.Touch.Position - Vector3.new(3366.33, 29.6273, -2663.62)).Magnitude < 20 then
                        LightHouseDoor = v
                    end
                end
            end
        end
        if not LightHouseDoor then
            return
        end
        for i = 1, 5 do
            local Players = game:GetService("Players")
            local Player = Players.LocalPlayer
            if Player.Character then
                Player.Character:SetPrimaryPartCFrame(LightHouseDoor.Touch.CFrame)
            end
            task.wait()
            if CurrentDoorHash then
                break
            end
        end
        if not CurrentDoorHash then
            return
        end
        for i, v in pairs(Doors) do
            local args = {
                [1] = CurrentDoorHash,
                [2] = {
                    ["Type"] = "Swing",
                    ["OpenFun"] = function()
                    end --[[FunSwing]] ,
                    ["Direction"] = 1,
                    ["Resolved"] = true,
                    ["State"] = {
                        ["CloseTime"] = 1666853616,
                        ["Direction"] = -1,
                        ["Open"] = true,
                        ["Proxy"] = 24
                    },
                    ["Settings"] = {
                        ["Type"] = "Swing",
                        ["ServerOnly"] = false,
                        ["Duration"] = 0.5,
                        ["TeamBlacklist"] = false,
                        ["SequenceRequireState"] = true,
                        ["Character"] = true,
                        ["Key"] = true,
                        ["Locked"] = false,
                        ["Vehicle"] = true,
                        ["Delay"] = 1.5,
                        ["Team"] = false
                    },
                    ["Model"] = v,
                    ["CloseFun"] = function()
                    end --[[FunSwing]] ,
                    ["HingeRelativeCFrame"] = CFrame.new(Vector3.new(-2.175048828125, 0, 0.000244140625),
                        Vector3.new(-0, -0, -1)),
                    ["ClosedCFrame"] = CFrame.new(Vector3.new(-1195.406494140625, 19.4500732421875, -1603.443603515625),
                        Vector3.new(-0, -0, -1)),
                    ["Tag"] = v:WaitForChild("Tag", 5).Value
                }
            }

            remote:FireServer(unpack(args))
        end


	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match("autobots roll out") then
		local rolloutargs = {
			[1] = "🤖 Autobot does not roll out! 🤖",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(rolloutargs))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">hack casino computers" then
		if game.workspace.Casino.OpenIndicators.Part.Material == Enum.Material.SmoothPlastic then

			local casinocodeerrargs = {
				[1] = "The Casino is currently closed.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(casinocodeerrargs[1], casinocodeerrargs[2])


		else

			local hackingcomputersargs = {
				[1] = "Autobot is hacking the Casino computers...",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(hackingcomputersargs[1], hackingcomputersargs[2])

			for _, Computer in pairs(game.workspace.Casino.Computers:GetChildren()) do

				if Computer.Display.BrickColor == BrickColor.new("Lime green") then
					break
				end

				repeat
					game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Computer.Display.Position)
					Computer.CasinoComputerHack:FireServer()
					wait()
				until Computer.Display.BrickColor == BrickColor.new("Lime green") or Computer.Display.BrickColor == BrickColor.new("Institutional white")


				if Computer.Display.BrickColor == BrickColor.new("Lime green") then
					break
				end

				wait()
			end

			local hackingvaultargs = {
				[1] = "Autobot is opening the Casino vaults...",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(hackingvaultargs[1], hackingvaultargs[2])

			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.workspace.Casino.HackableVaults.VaultDoorMain.Part.Position)
			game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Puzzle.RequestHack:FireServer()

			repeat
				task.wait(0.3)
			until game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Model.UnlockedLED.BrickColor == BrickColor.new("Lime green")

			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.workspace.Casino.HackableVaults.VaultDoorMain.Part.Position)
			game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Puzzle.UpdateDirection:FireServer()

			repeat
				task.wait(0.3)
			until game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Model.UnlockedLED.BrickColor == BrickColor.new("Lime green")

			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.workspace.Casino.HackableVaults.VaultDoorMain.Part.Position)
			game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Puzzle.UpdateDirection:FireServer()

			repeat
				task.wait(0.3)
			until game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Model.UnlockedLED.BrickColor == BrickColor.new("Lime green")

			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.workspace.Casino.HackableVaults.VaultDoorMain.Part.Position)
			game.workspace.Casino.HackableVaults.VaultDoorMain.InnerModel.Puzzle.UpdateDirection:FireServer()

			for _, Vault in pairs(game.workspace.Casino.HackableVaults:GetChildren()) do
				if Vault.Name == "VaultDoorSlider" then
					spawn(function()
						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vault.InnerModel.Puzzle.Part.Position)
						Vault.InnerModel.Puzzle.RequestHack:FireServer()

						repeat
							task.wait(0.3)
						until Vault.InnerModel.Model.Light.BrickColor == BrickColor.new("Lime green")

						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vault.InnerModel.Puzzle.Part.Position)
						Vault.InnerModel.Puzzle.UpdateDirection:FireServer()

						repeat
							task.wait(0.3)
						until Vault.InnerModel.Model.Light.BrickColor == BrickColor.new("Lime green")

						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vault.InnerModel.Puzzle.Part.Position)
						Vault.InnerModel.Puzzle.UpdateDirection:FireServer()

						repeat
							task.wait(0.3)
						until Vault.InnerModel.Model.Light.BrickColor == BrickColor.new("Lime green")

						game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vault.InnerModel.Puzzle.Part.Position)
						Vault.InnerModel.Puzzle.UpdateDirection:FireServer()
					end)
				end
			end
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(Jshorts, Message:lower()) then

		local jstorestausargs = {
			[1] = "The Jewlery Store will open in ".._G.JStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(jstorestausargs[1], jstorestausargs[2])


	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(BankShorts, Message:lower()) then
		local bankstatusargs = {
			[1] = "The Bank will open in ".._G.BankStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(bankstatusargs[1], bankstatusargs[2])


	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(TombShorts, Message:lower()) then
		local tombstatusargs = {
			[1] = "The Tomb will open in ".._G.TombStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(tombstatusargs[1], tombstatusargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(CasinoShorts, Message:lower()) then
		local casinostatusargs = {
			[1] = "The Casino will open in ".._G.CasinoStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(casinostatusargs[1], casinostatusargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(PowerShorts, Message:lower()) then

		local powerplantstatusargs = {
			[1] = "The Power Plant will open in ".._G.PowerStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(powerplantstatusargs[1], powerplantstatusargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(CSHipShorts, Message:lower()) then

		local cargoshipargs = {
			[1] = "The Cargo Ship will spawn in ".._G.CargoShipStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(cargoshipargs[1], cargoshipargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(CPlaneShorts, Message:lower()) then
		local cargoplaneargs = {
			[1] = "The Cargo Plane will spawn in ".._G.CargoPlaneStatus.."s".." and land in ".._G.CargoPlaneLandStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(cargoplaneargs[1], cargoplaneargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(MsmShorts, Message:lower()) then
		local msmargs = {
			[1] = "The Museum will open in ".._G.MsmStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msmargs[1], msmargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(TrainShorts, Message:lower()) then

		local trainargs = {
			[1] = "The Train will spawn in ".._G.TrainStatus.."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(trainargs[1], trainargs[2])

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">level" then

		if _G.Data["Levels"][tostring(Player.UserId)] then
			local levelargs = {
				[1] = Player.DisplayName.." you are Level "..GetFormattedNumber(_G.Data["Levels"][tostring(Player.UserId)]["Level"]).."!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(levelargs[1], levelargs[2])
		elseif _G.Data["Levels"][tostring(Player.UserId)] == nil then
			local levelargs2 = {
				[1] = Player.DisplayName.." you are Level 1!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(levelargs2[1], levelargs2[2])
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">open gates" then

		local opengateargs = {
			[1] = "Autobot opened the prison gates.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(opengateargs[1], opengateargs[2])

		for _, Button in pairs(game.workspace:GetChildren()) do
			if Button.Name == "Button" then
				fireclickdetector(Button.Click.ClickDetector)
			end
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">hangman" then
		if not _G.HangManRunning then
			_G.HangManRunning = true
			local ChooseRandomWord = HangManWords[math.random(1, #HangManWords)]
			local SplitLetters = string.split(ChooseRandomWord, "")
			_G.HangManWord = ChooseRandomWord
			_G.HangManLetters = {}
			_G.HangManUnsolvedLetters = {}
			print(ChooseRandomWord)
			for _, Letter in pairs(SplitLetters) do
				table.insert(_G.HangManLetters, Letter)
				table.insert(_G.HangManUnsolvedLetters, "_")
			end

			local hangmanstarted = {
				[1] = "Hangman has started! Chosen Word: ("..table.concat(_G.HangManUnsolvedLetters, "")..")",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(hangmanstarted))

			local hangmaninfo = {
				[1] = "To get started, guess ONE letter into the chat, if your letter is NOT correct no response will be given. Say >STOP if the word becomes tagged.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(hangmaninfo))

		else
			local alreadyrunning = {
				[1] = "Hangman is already running! Current Word: ("..table.concat(_G.HangManUnsolvedLetters, "")..")",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(alreadyrunning))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">stop" then
		local ChooseRandomWord = HangManWords[math.random(1, #HangManWords)]
		local SplitLetters = string.split(ChooseRandomWord, "")
		_G.HangManWord = ChooseRandomWord
		_G.HangManLetters = {}
		_G.HangManUnsolvedLetters = {}

		for _, Letter in pairs(SplitLetters) do
			table.insert(_G.HangManLetters, Letter)
			table.insert(_G.HangManUnsolvedLetters, "_")
		end

		local newwordchosen = {
			[1] = "Hangman was stopped, new word has been chosen: ("..table.concat(_G.HangManUnsolvedLetters, "")..")",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(newwordchosen))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">joke" then
		local Jokes = {"Chances are if you' ve seen one shopping center, you've seen a mall.", "I knew I shouldn't steal a mixer from work, but it was a whisk I was willing to take.", "Why was it called the dark ages? Because of all the knights.","What creature is smarter than a talking parrot? A spelling bee.", "Why did the kid cross the playground? To get to the other slide.", "My first time using an elevator was an uplifting experience. The second time let me down.", "To be Frank, I'd have to change my name.","What did the father tomato say to the baby tomato whilst on a family walk? Ketchup.","Why is Peter Pan always flying? Because he Neverlands.", "I was fired from the keyboard factory yesterday. I wasn't putting in enough shifts.", "Whoever invented the knock-knock joke should get a no bell prize.", "Why did the kid throw the clock out the window? He wanted to see time fly!","Why couldn't the kid see the pirate movie? Because it was rated arrr!","My son is studying to be a surgeon, I just hope he makes the cut.","Why did the man run around his bed? Because he was trying to catch up on his sleep!","What did one wall say to the other wall? I'll meet you at the corner!","Sometimes I tuck my knees into my chest and lean forward.  That’s just how I roll.","My dog used to chase people on a bike a lot. It got so bad I had to take his bike away.","Why was the robot angry? Because someone kept pressing his buttons!","I don't trust stairs. They're always up to something.","I went to the store to pick up eight cans of sprite... when I got home I realized I'd only picked seven up", "I got a reversible jacket for Christmas, I can't wait to see how it turns out.","Never take advice from electrons. They are always negative.","What did the beaver say to the tree? It's been nice gnawing you.","How do you fix a damaged jack-o-lantern? You use a pumpkin patch.","I have kleptomania, but when it gets bad, I take something for it.","I used to be addicted to soap, but I'm clean now.","When is a door not a door? When it's ajar.","My sister bet me $15 that I couldn't build a car out of spaghetti. You should have seen the look on her face as I drove pasta.","My boss told me to have a good day... so I went home.","Why do trees seem suspicious on sunny days? Dunno, they're just a bit shady.","If a child refuses to sleep during nap time, are they guilty of resisting a rest?","Why can't your nose be 12 inches long? Because then it'd be a foot!","What do you call a singing Laptop? A Dell","What kind of shoes does a thief wear? Sneakers","Why did the programmer quit his job? Because he didn't get arrays","What do you call a laughing motorcycle? A Yamahahahaha.","['hip', 'hip'] (hip hip array)", "What happens to a frog's car when it breaks down? It gets toad away.","Why do Java programmers wear glasses? Because they don't C#","Want to hear a joke about a piece of paper? Never mind...it's tearable","I just watched a documentary about beavers. It was the best dam show I ever saw", "If you see a robbery at an Apple Store... Does that make you an iWitness?","If you boil a clown... Do you get a laughing stock?","Finally realized why my plant sits around doing nothing all day... He loves his pot.", "When a dad drives past a graveyard: Did you know that's a popular cemetery? Yep, people are just dying to get in there","Why did the invisible man turn down the job offer? He couldn't see himself doing it", "How do you make holy water? You boil the hell out of it!", "What do you call sad coffee? Despresso.", "Did you hear about the hungry clock? It went back four seconds.", "Can February march? No, but April may.", "How can you tell a vampire has a cold? They start coffin."}
		local ChoosenRandomJoke = Jokes[math.random(1, #Jokes)]

		print(ChoosenRandomJoke)

		local jokeargs = {
			[1] = ChoosenRandomJoke,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(jokeargs))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match(">roast") then
		local Roast = {"YOU SHOULDN'T PLAY HIDE AND SEEK, NO ONE WOULD LOOK FOR YOU", "YA MAMA'S GOT 1 TOE & 1 KNEE AND THEY CALL HER TONY.", "YA MAMA'S LIKE A SNICKERS BAR, PACKED WITH NUTS.", "I'M NOT SAYING YOU'RE FAT, BUT IT LOOKS LIKE YOU WERE POURED INTO YOUR CLOTHES AND SOMEONE FORGOT TO SAY WHEN", "YA MAMAS SO FAT SHE HAD TO GET OBFUSCATED TWICE!", "YOU'RE SO FAT A PICTURE OF YOU WOULD FALL OFF THE WALL!", "WHAT ARE YOU GOING TO DO FOR A FACE WHEN THE BABOON WANTS HIS BUTT BACK?", "THE LAST TIME I SAW A FACE LIKE YOURS I FED IT A BANANA.", "YA MAMA IS SO OLD THAT SHE WAS A WAITRESS AT THE LAST SUPPER.", "YA MAMA IS SO OLD THAT HER MEMORY IS IN BLACK AND WHITE.", "LOOKS LIKE YOU FELL OFF THE UGLY TREE AND HIT EVERY BRANCH ON THE WAY DOWN.", "YA MAMA IS SO DIRTY THAT WHEN SHE TRIED TO TAKE A BATH, THE WATER JUMPED OUT AND SAID I'LL WAIT.", "YA MAMA'S SO DUMB THAT WHEN SHE SAW THE UNDER 17 NOT ADMITTED SIGN AT A MOVIE THEATRE, SHE WENT HOME AND GOT 16 FRIENDS.", "I BET YOUR BRAIN FEELS AS GOOD AS NEW, SEEING THAT YOU NEVER USE IT.", "YOU GET AS MUCH ACTION AS A NINE BUTTON ON A MICROWAVE.", "YOU DIDN'T FALL OUT OF THE STUPID TREE. YOU WERE DRAGGED THROUGH DUMBASH FOREST.", "YOU'RE SO FAT YOU LAID DOWN IN THE OCEAN AND SPAIN CLAIMED YOU AS THE NEW WORLD.", "YOU'RE AS USELESS AS A KNIFE WITHOUT A BLADE.", "YA MAMA IS SO NASTY THAT EVEN DOGS WON'T SNIFF HER CROTCH.", "YA MAMA SO FAT THAT WHEN SHE ASKED ME WHAT'S UP? I SAID YOUR WEIGHT!", "YA MAMA IS SO POOR THAT FOR HALLOWEEN, HER TRICK WAS THE TREAT.", "WHAT ARE YOU DOING HERE? DID SOMEONE LEAVE YOUR CAGE OPEN?", "LOOKS AREN'T EVERYTHING; IN YOUR CASE, THEY AREN'T ANYTHING", "YOU SHOULD HAVE BEEN A FACIAL.", "IF YOUR BRAIN WERE CHOCOLATE, IT WOULDN'T FILL AN M&M.", "TAKE OFF THAT MASK! DON'T YOU THINK IT'S A LITTLE EARLY FOR HALLOWEEN?", "SO YOU'VE CHANGED YOUR MIND, DOES THIS ONE WORK ANY BETTER?", "YA MAMA IS LIKE A BOWLING BALL... ROUND, HEAVY, AND YOU CAN FIT THREE FINGERS IN.", "YOU MUST BE ON THE SEAFOOD DIET. WHEN YOU SEE FOOD, YOU EAT IT!", "PLEASE TELL ME YOU DON'T HOME-SCHOOL YOUR KIDS.", "YOU'RE SO STUPID, IT TAKES YOU AN HOUR TO COOK MINUTE RICE.", "YO'RE SO UGLY, WHEN YOUR MOM DROPPED YOU OFF AT SCHOOL SHE GOT A FINE FOR LITTERING.", "I MAY BE FAT, BUT YOU'RE UGLY, AND I CAN LOSE WEIGHT.", "YOU'RE SO FAT, YOUR DOUBLE CHIN HAS A DOUBLE CHIN.", "YA MAMA'S COOTA IS SO NASTY, THEY MAKE YOU EAT IT DURING FEAR FACTOR", "YA MAMA IS SO GREASY THAT TEXACO BUYS OIL FROM HER.", "YA MAMA'S LIKE A POOL TABLE, SHE LIKES BALLS IN HER POCKET.", "WITH A FACE LIKE YOURS, I'D WISH I WAS BLIND.", "YOU HAVE TWO BRAINS CELLS, ONE IS LOST AND THE OTHER IS OUT LOOKING FOR IT.", "I HEARD YOU WENT TO A HAUNTED HOUSE AND THEY OFFERED YOU A JOB.", "YOU'RE SO UGLY HELLO KITTY SAID GOODBYE TO YOU.", "I WOULD ASK YOU HOW OLD YOU ARE BUT I KNOW YOU CAN'T COUNT THAT HIGH.", "EXCELLENT TIME TO BECOME A MISSING PERSON.", "YA MAMA SO NASTY, THE ROACHES IN HER HOUSE ASK TO BE SPRAYED"}
		local ChooseRandomRoast = Roast[math.random(1, #Roast)]
		local RoastArgs = string.split(Message, " ")
		local PersonToRoast = RoastArgs[2]
		local PersonToRoastDisplayName

		print(ChooseRandomRoast)

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(PersonToRoast)) == PersonToRoast:lower() then
				PersonToRoastDisplayName = Players
			end
		end

		if PersonToRoastDisplayName.DisplayName == "Autobot" then PersonToRoastDisplayName = Player end

		local roastargs = {
			[1] = "@"..PersonToRoastDisplayName.DisplayName.." "..ChooseRandomRoast:lower(),
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(roastargs))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match(">where is") then
		local WhereIsArgs = string.split(Message, " ")
		local WhereIsUser = WhereIsArgs[3]
		local WhereIsDisplayName

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(WhereIsUser)) == WhereIsUser:lower() then
				WhereIsDisplayName = Players
			end
		end

		local Location = GetCharacterLocation(WhereIsDisplayName)

		local roastargs = {
			[1] = WhereIsDisplayName.DisplayName.." is at/near the: "..Location,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(roastargs))


	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">airdrops" then
		local AirDrops = {}

		for _, each in pairs(game.workspace:GetChildren()) do
			if each.Name == "Drop" then
				local Location = GetLocation(each)
				print(Location)
				table.insert(AirDrops, Location)
			end
		end

		if #AirDrops == 0 then
			local roastargs = {
				[1] = "No Airdrops found!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(roastargs))

		else
			local roastargs = {
				[1] = "Airdrop Locations: "..table.concat(AirDrops, ", "),
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(roastargs))
		end 

	elseif Message:lower():match(">set level") and table.find(_G.Data["Managers"], Player.UserId) then
		local Splitted = string.split(Message, " ")
		local PlayerInMessage = Splitted[3]
		local LevelValue = Splitted[4]
		local PlayerToGiveLevel

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(PlayerInMessage)) == PlayerInMessage:lower() then
				PlayerToGiveLevel = Players
			end
		end

		if not tonumber(LevelValue) then
			local gavelevelerrorlargs = {
				[1] = "Error! Level must be a number value!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(gavelevelerrorlargs))
		else
			_G.Data["Levels"][tostring(PlayerToGiveLevel.UserId)]["Level"] = tonumber(LevelValue)

			local gavelevelargs = {
				[1] = PlayerToGiveLevel.DisplayName.." is now Level "..GetFormattedNumber(LevelValue).."!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(gavelevelargs))

			SaveAutobotData()
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">next open" then
		local Times = {
			[1] = {["Time"] = _G.JStatus, ["Name"] = "Jewlery Store"},
			[2] = {["Time"] = _G.BankStatus, ["Name"] = "Bank"},
			[3] = {["Time"] = _G.TombStatus, ["Name"] = "Tomb"},
			[4] = {["Time"] = _G.MsmStatus, ["Name"] = "Museum"},
			[5] = {["Time"] = _G.PowerStatus, ["Name"] = "Power Plant"},
			[6] = {["Time"] = _G.CasinoStatus, ["Name"] = "Casino"},
			[7] = {["Time"] = _G.CargoPlaneStatus, ["Name"] = "Cargo Plane"},
			[8] = {["Time"] = _G.CargoShipStatus, ["Name"] = "Cargo Ship"},
			[9] = {["Time"] = _G.TrainStatus, ["Name"] = "Cargo/Passenger Train"},
		}

		table.sort(Times, function(Current, Previous)
		
		if Current["Time"] == 0 then Current = {} return end
			return Current["Time"] < Previous["Time"]
		end)

		local nextopenargs = {
			[1] = "The next Robbery to open is "..Times[1]["Name"].." in "..Times[1]["Time"].."s",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(nextopenargs))

	elseif Message:lower():match(">create giveaway") and not Message:lower():match("autoslotswin,") and table.find(Managers, Player.UserId) then
		if not _G.GiveawayActive == true then
			_G.GiveawayActive = true
			local Splitted = string.split(Message, " ")
			local ItemsTable = {Splitted[3], Splitted[4], Splitted[5]}
			local GiveawayItems = table.concat(ItemsTable, " ")

			_G.GiveawayItem = GiveawayItems
			local started = {
				[1] = "🎉 "..Player.DisplayName.." has started a giveaway for "..GiveawayItems.." respond '>enter' to be entered into this giveaway! 🎉",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(started))

		else
			local cannotstartargs = {
				[1] = "A giveaway is already running, select a winner before starting another giveaway!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cannotstartargs))
		end

	elseif Message:lower():match(">select winner") and not Message:lower():match("autoslotswin,") and table.find(_G.Data["Managers"], Player.UserId) then
		local ChosenPlayer = _G.PlayersInGiveaway[math.random(1, #_G.PlayersInGiveaway)]

		local ended = {
			[1] = "🎉"..ChosenPlayer.." you won the giveaway for ".._G.GiveawayItem.."!🎉", 
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(ended))

		_G.GiveawayActive = false
		_G.PlayersInGiveaway = {}
		_G.GiveawayItem = nil

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower():match(">autobot") then
		for Trigger, Responses in pairs(Brain) do
			for _, Phrase in pairs(Trigger) do
				if string.gsub(Message, ">autobot ", ""):lower():match(Phrase:lower()) then
					MatchedResponses = Responses
					break
				end
				if MatchedResponses then
					break
				end
			end
			if MatchedResponses then
				break
			end
end

if MatchedResponses then
	local Response = MatchedResponses[math.random(1, #MatchedResponses)]

	local messageargs = {
		[1] = Response,
		[2] = "All"
	}
	game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(messageargs[1], messageargs[2])
	MatchedResponses = nil
else
	local MessageSize = {
		[1] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[2] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[3] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[4] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[5] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[6] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[7] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		[8] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
	}

	local messageargs = {
		[1] = MessageSize[math.random(1, #MessageSize)],
		[2] = "All"
	}
	game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(messageargs[1], messageargs[2])
end


	elseif Message:lower():match(">add manager") and table.find(_G.Data["Managers"], Player.UserId) then
		local Splitted = string.split(Message, " ")
		local PersonToAddManager = Splitted[3]
		local PersonToAddManagerDisplayName

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(PersonToAddManager)) == PersonToAddManager:lower() then
				PersonToAddManagerDisplayName = Players
			end
		end

		if not table.find(_G.Data["Managers"], PersonToAddManagerDisplayName.UserId) then

			table.insert(_G.Data["Managers"], PersonToAddManagerDisplayName.UserId)

			local addedmanagerargs = {
				[1] = PersonToAddManagerDisplayName.DisplayName.." is now a Manager.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(addedmanagerargs))
	
			SaveAutobotData()

		else
			local addedmanagerargs = {
				[1] = PersonToAddManagerDisplayName.DisplayName.." is already a Manager.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(addedmanagerargs))
		end
	elseif Message:lower():match(">remove manager") and table.find(_G.Data["Managers"], Player.UserId) then
		local Splitted = string.split(Message, " ")
		local PersonToAddManager = Splitted[3]
		local PersonToAddManagerDisplayName

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(PersonToAddManager)) == PersonToAddManager:lower() then
				PersonToAddManagerDisplayName = Players
			end
		end

		if table.find(_G.Data["Managers"], PersonToAddManagerDisplayName.UserId) then

			table.remove(_G.Data["Managers"], table.find(_G.Data["Managers"], PersonToAddManagerDisplayName.UserId))

			local addedmanagerargs = {
				[1] = PersonToAddManagerDisplayName.DisplayName.." is no longer a Manager.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(addedmanagerargs))
	
			SaveAutobotData()

		else
			
			local addedmanagerargs = {
				[1] = "[ERROR!] "..PersonToAddManagerDisplayName.DisplayName.." is not a Manager. ",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(addedmanagerargs))
		end

	elseif Message:lower():match(">add levels") and table.find(_G.Data["Managers"], Player.UserId) then
		local Splitted = string.split(Message, " ")
		local LevelValue = Splitted[4]
		local PersonToAddLevel = Splitted[3]
		local PersonToAddLevelDisplayName

		for _, Players in pairs(game.Players:GetChildren()) do
			if string.sub(Players.DisplayName:lower(), 1, string.len(PersonToAddLevel)) == PersonToAddLevel:lower() then
				PersonToAddLevelDisplayName = Players
			end
		end

		_G.Data["Levels"][tostring(PersonToAddLevelDisplayName.UserId)]["Level"] = _G.Data["Levels"][tostring(PersonToAddLevelDisplayName.UserId)]["Level"] + tonumber(LevelValue)

		local addedlevelargs = {
			[1] = "Added +"..GetFormattedNumber(LevelValue).." Levels to "..PersonToAddLevelDisplayName.DisplayName,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(addedlevelargs))

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">rewards" then
		local levelrewards = {
			[1] = "Level Rewards: Level 5: >spk as | Level 10: >spk bad | Level 15: >spk ad | Level 20: >nuke | Level 25: >hyperchrome",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(levelrewards))

    elseif Message:lower() == ">manager commands" and table.find(_G.Data["Managers"], Player.UserId) then
		local cmds1 = {
			[1] = "Autobot Manager Commands: >Blacklist [Player's Display Name] [Reason], >Whitelist [Players's Display Name], >Set Level [Player's Display Name] [Number],",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cmds1))

		local cmds2 = {
			[1] = ">Add Levels [Player's Display Name] [Number], >Change Servers, >Rejoin Server, >Force AutoSlotsWin, >Create Giveaway [Item], >Select Winner",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(cmds2))


	elseif Message:lower() == ">autocrash" and not table.find(_G.Blacklist, Player.UserId) then
		if _G.AutoCrashRunning == false then
			_G.AutoCrashRunning = true
			_G.CanJoinCrash = true
			_G.AddMultiplier = false

			local Crashes = {math.random(0,15), math.random(0,5), math.random(0,20)}
			_G.CrashTime = Crashes[math.random(1, #Crashes)]
			_G.CrashX = 0
			_G.CrashPlayers = {}


			local CrashStart = {
				[1] = "AutoCrash has started! AutoCrash will begin in 20s, respond '>join bet [Level Amount]' for a chance at up to 20X your Levels!",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(CrashStart))

			task.spawn(function()
				local Count = 0
				repeat
					task.wait(1)
					Count = Count + 1
				until Count == 20

				local CrashStart = {
					[1] = "AutoCrash has started! Respond '>cashout' before AutoCrash crashes! If you do not cashout before AutoCrash crashes, you loose all your betted levels.",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(CrashStart))
				_G.CanCashout = true
				_G.CanJoinCrash = false
				_G.AddMultiplier = true

				task.spawn(function()
					repeat
						task.wait(1)
						_G.CrashX = _G.CrashX + 1
					until _G.AddMultiplier == false
				end)

				task.spawn(function()
					task.wait(_G.CrashTime)
					_G.CanCashout = false
					local CrashStart = {
						[1] = "💥AutoCrash crashed at ".._G.CrashX.."X💥",
						[2] = "All"
					}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(CrashStart))
					_G.AutoCrashRunning = false
					SaveAutobotData()
					_G.CrashPlayers = {}
				end)
			end)
		else
			local CrashRunning = {
				[1] = "[ERROR!] AutoCrash is already running! To join respond '>join bet [Level Amount]'",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(CrashRunning))
		end

	elseif not Message:lower():match("10s") and not Message:lower():match("[ERROR!]") and Message:lower():match(">join bet") and not table.find(_G.Blacklist, Player.UserId) and _G.CanJoinCrash == true then
		if not _G.CrashPlayers[tostring(Player.UserId)] then
			local MessageSplit = string.split(Message, " ")
			local BetAmount = math.floor(tonumber(MessageSplit[3]))

			if BetAmount then
					if BetAmount > 0 then
						if _G.Data["Levels"][tostring(Player.UserId)]["Level"] >= BetAmount then
							local BetError = {
								[1] = Player.DisplayName.." betted "..GetFormattedNumber(BetAmount).." Levels on AutoCrash!",
								[2] = "All"
							}
							game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
	
							_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] - BetAmount
							_G.CrashPlayers[tostring(Player.UserId)] = {
								["BetAmount"] = BetAmount,
							}
	
							SaveAutobotData()
						else
							local BetError = {
								[1] = "[ERROR!] "..Player.DisplayName.." you do not have "..GetFormattedNumber(BetAmount).." Levels to bet.",
								[2] = "All"
							}
							game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
						end
					else
						local BetError = {
							[1] = "[ERROR!] Bet must be greater than 0!",
							[2] = "All"
						}
						game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
					end
			else
				local BetError = {
					[1] = "[ERROR!] Bet must be a number value!",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
			end
		end

	elseif not Message:lower():match("betted") and Message:lower():match(">cashout") and not table.find(_G.Blacklist, Player.UserId) and _G.CanCashout == true then
		printconsole(Player.DisplayName)
		local BetReward = _G.CrashPlayers[tostring(Player.UserId)]["BetAmount"] * tonumber(_G.CrashX)

		_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] + BetReward

		local BetError = {
			[1] = "✅ "..Player.DisplayName.." cashed out at ".._G.CrashX.."X and got +"..GetFormattedNumber(BetReward).." Levels",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))

		_G.CrashPlayers[tostring(Player.UserId)] = nil

		SaveAutobotData()

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">colorbet" then
	
		local BetError = {
			[1] = "To play ColorBet first choose a Color (Blue = 2x | Red = 2x | White = 5x) and respond '>ColorBet [Color] [Level Amount]' if your Color is not rolled, you loose all your betted levels.",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))


	elseif not table.find(_G.Blacklist, Player.UserId) and table.find(Colors, Message:lower():split(" ")[2]) then
		local Split = Message:lower():split(" ")
		local SelectedColor = Colors[math.random(1, #Colors)]
		local BetAmount = math.floor(tonumber(Split[3]))
		if _G.Data["Levels"][tostring(Player.UserId)]["Level"] > BetAmount then
			if BetAmount then
				if BetAmount > 0 then
					local ColorToValue = {
						["blue"] = 2,
						["red"] = 2,
						["white"] = 5
					}
					local ColorToEmoji = {
						["blue"] = "🔵",
						["red"] = "🔴",
						["white"] = "⚪"
					}
					
					_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] - BetAmount
					if SelectedColor == Split[2] then
						local BetError = {
							[1] = "ColorBet rolled... ("..ColorToEmoji[SelectedColor]..") | "..Player.DisplayName.." you got +"..GetFormattedNumber(BetAmount * ColorToValue[Split[2]]).." Levels!",
							[2] = "All"
						}
						game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
						_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] + BetAmount * ColorToValue[Split[2]]
						SaveAutobotData()
					else
						local BetError = {
							[1] = "ColorBet rolled... ("..ColorToEmoji[SelectedColor]..")",
							[2] = "All"
						}
						game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
					end
				else
					local BetError = {
						[1] = "[ERROR!] Bet must be greater than 0!",
						[2] = "All"
					}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
				end
				else
					local BetError = {
						[1] = "[ERROR!] Bet must be a number value!",
						[2] = "All"
					}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
				end
		else
			local BetError = {
				[1] = "[ERROR!] "..Player.DisplayName.." you do not have "..BetAmount.." Levels to ColorBet",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">battle" then
		if _G.BattleRunning == false then
			if _G.Data["Levels"][tostring(Player.UserId)]["Level"] > 5 then
				_G.BattleRunning = true
				_G.BattleWaitForPlayer = true
				_G.BattlePlayers["Player1"] = {
					["UserId"] = Player.UserId 
				}

				_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] - 5
				local BetError = {
					[1] =  Player.DisplayName.." has started a Battle, respond '>join battle' or Battle against Auto with '>join battle bot'",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))

				task.spawn(function()
					repeat task.wait() until _G.BattleWaitForPlayer == false
					
					local Player1 = game:GetService("Players"):GetPlayerByUserId(_G.BattlePlayers["Player1"]["UserId"])
					local Player2 = game:GetService("Players"):GetPlayerByUserId(_G.BattlePlayers["Player2"]["UserId"])

					local Player1Rarity = GetBattleRarity(math.random(2,100))
					local Player2Rarity = GetBattleRarity(math.random(2,100))

					local Player1BattleItem = GetBattleItem(Player1Rarity)
					local Player2BattleItem = GetBattleItem(Player2Rarity)
					local Winner
					local WinnerValue

					if Player1BattleItem.Value > Player2BattleItem.Value then
						Winner = Player1
						WinnerValue = Player1BattleItem.Value
					elseif  Player2BattleItem.Value > Player1BattleItem.Value  then
						Winner = Player2
						WinnerValue = Player2BattleItem.Value
					elseif Player1BattleItem.Value == Player2BattleItem.Value  then
						local RandomWinner = {Player1, Player2}
						local ChosenRandomWinner = RandomWinner[math.random(1, #RandomWinner)]

						if ChosenRandomWinner == Player1 then
							Winner = Player1
							WinnerValue = Player1BattleItem.Value

						elseif ChosenRandomWinner == Player2 then
							Winner = Player2
							WinnerValue = Player2BattleItem.Value
						end
					end

					local BetError = {
						[1] =  "P1 got a "..Player1Rarity:upper().." "..Player1BattleItem.Name:upper().." worth "..tostring(GetFormattedNumber(Player1BattleItem.Value)).." Levels! |".." P2 got a "..Player2Rarity:upper().." "..Player2BattleItem.Name:upper().." worth "..GetFormattedNumber(Player2BattleItem.Value).." Levels! | 🎉 "..Winner.DisplayName.." won "..tostring(GetFormattedNumber(WinnerValue)).." Levels! 🎉",
						[2] = "All"
					}
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
					
					_G.Data["Levels"][tostring(Winner.UserId)]["Level"] = _G.Data["Levels"][tostring(Winner.UserId)]["Level"] + WinnerValue
					_G.BattleRunning = false
					SaveAutobotData()
				end)

			else
				local BetError = {
					[1] =  Player.DisplayName.." you do not 5 Levels to start a battle.",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
			end
		else
			local BetError = {
				[1] = "A Battle is already running, to join respond '>join battle' or Battle against Auto with '>join battle bot' [COST 5 Levels]",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
		end


	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">join battle" then
		if Player.UserId == _G.BattlePlayers["Player1"]["UserId"] then return end 
		if _G.BattleRunning == true then
			if _G.Data["Levels"][tostring(Player.UserId)]["Level"] > 5 then
				_G.Data["Levels"][tostring(Player.UserId)]["Level"] = _G.Data["Levels"][tostring(Player.UserId)]["Level"] - 5
				_G.BattlePlayers["Player2"] = {
					["UserId"] = Player.UserId
				}

				_G.BattleWaitForPlayer = false
			else
				local BetError = {
					[1] =  Player.DisplayName.." you do not enough Levels to start a battle. [5 Levels]",
					[2] = "All"
				}
				game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
		end
		else
			local BetError = {
				[1] = "A Battle is not running, respond '>battle' to start a Battle.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
		end

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">join battle bot" then
		if _G.BattleRunning == true then
			_G.BattlePlayers["Player2"] = {
				["UserId"] = game.Players.LocalPlayer.UserId
			}

			_G.BattleWaitForPlayer = false
		else
			local BetError = {
				[1] = "A Battle is not running, respond '>battle' to start a Battle.",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))
		end
		
	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">tomb" then
		local BetError = {
			[1] = "AutoBot is standing on the button closest to prison, 2 more players are required...",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(BetError))

		task.spawn(function()
			local Count  = 0
			repeat
			task.wait()
			Count = Count + 1
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(528.431, 25.904, -480.641)
			until Count == 100
		end)

	elseif not table.find(_G.Blacklist, Player.UserId) and Message:lower() == ">buy" then
		local postad = {
			[1] = "/w "..Player.Name.." Buy Autobot at dsc.gg/JBAUTOBOT |600 R$ |5$",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(postad))
	end

	if not table.find(_G.Blacklist, Player.UserId) and _G.GiveawayActive == true and not table.find(_G.PlayersInGiveaway, Player.DisplayName) and Message:lower() == ">enter" then
		table.insert(_G.PlayersInGiveaway, Player.DisplayName)

		local entered = {
			[1] = "🎉 "..Player.DisplayName.." you have been entered into the giveaway for ".._G.GiveawayItem.."! 🎉",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(entered))
	end

	if _G.CanCopy == true and Player.Name == game.Players.LocalPlayer.Name == false then
		local copyresponseargs = {
			[1] = "["..Player.DisplayName.."]: "..Message,
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(copyresponseargs))
	end

	if _G.CanRun == true and Player.Name == game.Players.LocalPlayer.Name == false then
		wait(math.random(1,5))
		local MessageSize = {
			[1] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[2] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[3] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[4] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[5] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[6] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[7] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
			[8] = Player.DisplayName.." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)].." ".._G.Messages[math.random(1, #_G.Messages)]..".",
		}

		local messageargs = {
			[1] = MessageSize[math.random(1, #MessageSize)],
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(messageargs[1], messageargs[2])

		local split = string.split(Message, " ")
		for _, each in pairs(split) do 
			for _, brain in pairs(_G.Messages) do
				if not table.find(_G.Messages, each) and not each:match("#") and not each:match(">") then
					table.insert(_G.Messages, each)
				end
			end
		end
	end

	if not table.find(_G.Blacklist, Player.UserId) and _G.HangManRunning == true and table.find(_G.HangManLetters, Message:lower()) then
		for _, Letter in pairs(_G.HangManLetters) do
			if Letter == Message:lower() then
				local Index = table.find(_G.HangManLetters, Message:lower())
				_G.HangManLetters[Index] = "-"
				_G.HangManUnsolvedLetters[Index] = Message:lower()
			end
		end

		if not table.find(_G.HangManUnsolvedLetters, "_") then
			local solvedword = {
				[1] = "🎊 🎉The last letter was found! The word was: ("..table.concat(_G.HangManUnsolvedLetters, "")..") 🎊 🎉",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(solvedword[1], solvedword[2])

			_G.HangManUnsolvedLetters = {}
			_G.HangManLetters = {}
			_G.HangManRunning = false
		else
			local foundletter = {
				[1] = "🎊 🎉 A letter was found! The new word is: ("..table.concat(_G.HangManUnsolvedLetters, "")..") 🎊 🎉",
				[2] = "All"
			}
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(foundletter[1], foundletter[2])
		end
	end

	if not table.find(_G.Blacklist, Player.UserId) and _G.HangManRunning == true and Message:lower() == _G.HangManWord then
		local solvedword = {
			[1] = "🎊 🎉The word was found! The word was: (".._G.HangManWord..") 🎊 🎉",
			[2] = "All"
		}
		game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(solvedword[1], solvedword[2])

		_G.HangManUnsolvedLetters = {}
		_G.HangManLetters = {}
		_G.HangManRunning = false
	end
end

local Players = game:GetService("Players")
Filtered.OnClientEvent:Connect(function(MSG)
	local Player = Players:FindFirstChild(MSG.FromSpeaker)
	local Message = MSG.Message
	RunAutoBot(Player, Message)
end)
